DROP TABLE IF EXISTS vuln_flooded_slr1;
CREATE TABLE vuln_flooded_slr1 AS
SELECT 
	slr,
	vuln,
	pop,
	geom,
	SUM(expected_loss_existing) - SUM(expected_loss_restored) as aeb,
	SUM(pop * flooded_cnt_existing / bldg_cnt / return_period) as existing_aepfl,
	SUM(pop * flooded_cnt_restored / bldg_cnt / return_period) as restored_aepfl,
	SUM(pop * flooded_cnt_existing / bldg_cnt / return_period) -
		SUM(pop * flooded_cnt_restored / bldg_cnt / return_period) as pop_protected
FROM
(
SELECT 
	slr,
	return_period,
	communit_8 as vuln,
	communit_9 as pop,
	ST_SetSRID(bcdc.geom, 4326) geom,
	SUM(
		CASE
			WHEN restoration_status = 'existing' THEN 1
			ELSE 0
		END * (bldg_loss_usd + content_loss_usd + inv_loss_usd) / return_period
	) as expected_loss_existing,
	SUM(
		CASE
			WHEN restoration_status = 'restored' THEN 1
			ELSE 0
		END * (bldg_loss_usd + content_loss_usd + inv_loss_usd) / return_period
	) as expected_loss_restored,
	count(DISTINCT oid) filter (where occ LIKE '%RES%') as bldg_cnt,
	count(DISTINCT oid) filter (where occ LIKE '%RES%' AND bddf_id != 0 and restoration_status = 'existing') as flooded_cnt_existing,
	count(DISTINCT oid) filter (where occ LIKE '%RES%' AND bddf_id != 0 and restoration_status = 'restored') as flooded_cnt_restored
FROM 
	nsi_applied_ddf nsi,
	bcdc_community_vulnerability bcdc
WHERE 
	ST_Intersects(nsi.geom, ST_SetSRID(bcdc.geom, 4326))
	AND NOT EXISTS (SELECT 1 FROM all_sites sites WHERE ST_Intersects(sites.geom, nsi.geom))
group by 1,2,3,4,5
)q
WHERE flooded_cnt_restored + flooded_cnt_existing > 0
	AND slr = 1
GROUP BY 1,2,3,4
ORDER BY 6 ASC
;